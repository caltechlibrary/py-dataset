
# dataset module for Python 3

This module provides the functionality of the _dataset_ command line tool as a Python 3.6 module.
Once installed try out the following commands to see if everything is in order (or to get familier with
_dataset_).

The "#" comments don't have to be typed in, they are there to explain the commands as your type them.
Start the tour by launching Python3 in interactive mode.

```shell
    python3
```

Then run the following Python commands.

```python
    import dataset
    # Almost all the commands require the collection_name as first paramter, we're storing that name in c_name for convience.
    c_name = "a_tour_of_dataset.ds"

    # Let's create our a dataset collection. We use the method called 'init' it returns True or False
    dataset.init(c_name)

    # Let's check our collection to see if it is OK
    dataset.status(c_name)

    # Let's count the records in our collection (should be zero)
    cnt = dataset.count(c_name)
    print(cnt)

    # Let's read all the keys in the collection (should be an empty list)
    keys = dataset.keys(c_name)
    print(keys)

    # Now let's add a record to our collection. To create a record we need to know
    # this collection name (e.g. c_name), the key (most be string) and have a record (i.e. a dict literal or variable)
    key = "one"
    record = {"one": 1}
    ok = dataset.create(c_name, key, record)
    # If ok is False we can check the last error message with the 'error_message' method
    if ok == False:
        print(dataset.error_message())

    # Let's count and list the keys in our collection, we should see a count of '1' and a key of 'one'
    dataset.count(c_name)
    keys = dataset.keys(c_name)
    print(keys)

    # We can read the record we stored using the 'read' method.
    new_record = dataset.read(c_name, key)
    print(new_record)

    # Let's modify new_record and update the record in our collection
    new_record["two"] = 2
    ok = dataset.update(c_name, key, new_record)
    if ok == False:
        print(dataset.error_message())
    
    # Let's print out the record we stored using read method
    print(dataset.read(c_name, key)

    # Finally we can remove (delete) a record from our collection
    ok = dataset.delete(c_name, key)
    if ok == False:
        print(dataset.error_message())

    # We should not have a count of Zero records
    cnt = dataset.count(c_name)
    print(cnt)
```



